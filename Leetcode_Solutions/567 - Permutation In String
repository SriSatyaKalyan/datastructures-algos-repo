class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s1.length() == 0) { return true; }
        HashMap<Character, Integer> map = new HashMap<>();

        char[] arr = s1.toCharArray();
        for(int i=0; i < arr.length; i++){
            if(!map.containsKey(arr[i])){
                map.put(arr[i], 1);
            }else{
                map.put(arr[i], map.get(arr[i]) + 1);
            }
        }

        char[] arr2 = s2.toCharArray();
        for(int i=0; i < arr2.length; i++) {
            if(map.containsKey(arr2[i]) && (i + s1.length() <= s2.length()) && checkInclusionHere(i, map, s1, s2)) {
                return true;
            }
        }

        return false;
    }

    public boolean checkInclusionHere(int i, HashMap<Character, Integer> hashMap, String s1, String s2) {
        HashMap<Character, Integer> map = new HashMap<>(hashMap);
        if(i + s1.length() > s2.length()) { return false; }
        char[] arr3 = s2.substring(i, i + s1.length()).toCharArray();
        for(int j = 0; j < arr3.length; j++) {
            if (!map.containsKey(arr3[j]) || map.get(arr3[j]) == 0) {
                return false;
            }
            map.put(arr3[j], map.get(arr3[j]) - 1);
        }

        return true;
    }
}

TC:
SC: