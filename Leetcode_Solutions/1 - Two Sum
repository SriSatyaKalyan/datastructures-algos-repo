class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        int i = 0;

        for(i=0; i < nums.length; i++){
            if(map.containsKey(target - nums[i])){ break; }
            map.put(nums[i], i);
        }

        return new int[]{map.get(target - nums[i]), i};
    }
}

TC: O(N). We traverse the list containing N elements only once. Each lookup in the table costs only O(1) time
SC: O(N). The extra space required depends on the number of items stored in the hash table, which stores at most N elements