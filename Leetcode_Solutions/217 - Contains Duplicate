import java.util.*;

class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        for(int i = 1; i < (nums).length; i++){
            System.out.println(nums[i] + " | " + nums[i-1]);
            if(nums[i] == nums[i-1]){
                return true;
            }
        }

        return false;
    }
}

TC: O(n log(n)). Sorting is O(n log(n)) and the sweeping is O(n). The entire algorithm is dominated by the sorting step, and hence the time complexity
SC: O(1). Space depends on the sorting implementation which, usually, costs O(1) auxiliary space if heapsort is used