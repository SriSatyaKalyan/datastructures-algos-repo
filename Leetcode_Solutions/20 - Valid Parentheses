class Solution {

    private HashMap<Character, Character> mappings;

    public static final Map<Character, Character> map = Map.of('(', ')',
                                                               '[', ']',
                                                               '{', '}');

    public boolean isValid(String s) {
        if(s.length() % 2 != 0) { return false; }

        Stack<Character> stack = new Stack<Character>();

        for(char c : s.toCharArray()){
            if(map.containsKey(c)){
                stack.add(c);
            }else{
                if(stack.isEmpty()){
                    return false;
                }
                char open = stack.pop();
                if(map.get(open) != c){
                    return false;
                }
            }
        }

        return stack.isEmpty();
    }
}

TC: O(n) because we simply traverse the given string one character at a time. Also, Push and Pop operations on the stack take O(1) time.
SC: O(n) because in the worst case, we are pushing all the characters in the string are present in the stack, in the case of "{{{{{{{{"