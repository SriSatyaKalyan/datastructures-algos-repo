public boolean isAnagram(String s, String t) {
    if (s.length() != t.length()) {
        return false;
    }
    int[] counter = new int[26];
    for (int i = 0; i < s.length(); i++) {
        counter[s.charAt(i) - 'a']++;
        counter[t.charAt(i) - 'a']--;
    }
    for (int count : counter) {
        if (count != 0) {
            return false;
        }
    }
    return true;
}

TC: O(n). Time complexity is O(n)O(n)O(n) because accessing the counter table is a constant time operation.
SC: O(1). Although we do use extra space, the space complexity is O(1)O(1)O(1) because the table's size stays constant no matter how large nnn is.

Follow up: What if the inputs contain unicode characters? How would you adapt your solution to such case?
Answer: Use a hash table instead of a fixed size counter. Imagine allocating a large size array to fit the entire range of unicode characters, which could go up to more than 1 million.
A hash table is a more generic solution and could adapt to any range of characters.