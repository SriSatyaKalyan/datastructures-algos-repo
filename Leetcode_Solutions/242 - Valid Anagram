class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }
        char[] str1 = s.toCharArray();
        char[] str2 = t.toCharArray();
        Arrays.sort(str1);
        Arrays.sort(str2);
        return Arrays.equals(str1, str2);
    }
}

TC: O(n log(n)). Assume that n is the length of String s. Sorting costs O(n log(n)) and comparing the strings cost O(n). Sorting time dominates and the overall time complexity is O(n log(n))
SC: O(1). Space depends on the sorting implementation which, usually, costs O(1) auxiliary space if heapsort is used.

Follow up: What if the inputs contain unicode characters? How would you adapt your solution to such case?
Answer: Use a hash table instead of a fixed size counter. Imagine allocating a large size array to fit the entire range of unicode characters, which could go up to more than 1 million.
A hash table is a more generic solution and could adapt to any range of characters.