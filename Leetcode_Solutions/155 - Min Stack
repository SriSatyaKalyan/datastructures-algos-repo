class MinStack {

    private Stack<int[]> stack = new Stack<>();

    public MinStack() {

    }

    public void push(int val) {
        // If the stack is empty, then the min value must just be the first value we add
        if(stack.isEmpty()){
            stack.push(new int[]{val, val});
            return;
        }

        int currentMin = stack.peek()[1];
        stack.push(new int[]{val, Math.min(val, currentMin)});
    }

    public void pop() {
        stack.pop();
    }

    public int top() {
        return stack.peek()[0];
    }

    public int getMin() {
        return stack.peek()[1];
    }
}

TC: O(1) for all operations
push(): Checking the top of the Stack, comparing numbers and pushing to the top of the Stack are all O(1) operations.
        Therefore, this is an overall O(1) operation.
pop(): Popping from the Stack is an O(1) operation.
top(): Looking at the top of the Stack is an O(1) operation.
getMin(): The operation is O(1) because we are not comparing values to find it. If we had not kept track of it on the Stack,
          and instead search for it every time, then it would have been an O(n) operation.
SC: Worst case scenario is that all operations are push. In this case, it will be O(2 * n) = O(n) complexity.