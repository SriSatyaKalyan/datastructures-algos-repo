class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode curr = head;
        int length = 0;

        while(curr != null){
            length++;
            curr = curr.next;
        }

        // System.out.println("The length of the list is: " + length);

        if(length == n){
            return head.next;
        }

        int prevNode = length - n;
        curr = head;

        while(prevNode > 1){
            curr = curr.next;
            prevNode--;
        }

        if (curr.next != null) {
            curr.next = curr.next.next;
        }else{
            curr.next = null;
        }

        return head;
    }
}

TC: O(L). The algorithm makes two traversal of the list, first to calculate list length L and second to find the (Lâˆ’n)th node.
          There are 2L-n operations and time complexity is O(L)
SC: The space allocated is constant, so the SC will be O(1)