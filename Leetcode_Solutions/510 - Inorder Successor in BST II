/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
};
*/

class Solution {
    public Node inorderSuccessor(Node x) {
        // the successor is somewhere lower in the right subtree
        if (x.right != null) {
          x = x.right;
          while (x.left != null) x = x.left;
          return x;
        }

        // the successor is somewhere upper in the tree
        while (x.parent != null && x == x.parent.right) x = x.parent;
        return x.parent;

        //here, we do not have to explicitly return null as (x.parent) will be null when there is nothing to the right of the node anymore
    }
}

TC: O(H), where H is the height of the tree. That means O(log N) in the average case, O(N) in the worst case, where N is the number of nodes in the tree
SC: O(1), since no additional space is allocated during the calculation