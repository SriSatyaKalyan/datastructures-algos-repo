import java.util.*;

class Solution {
    public int numIdenticalPairs(int[] nums) {

        Hashtable<Integer, Integer> table = new Hashtable<Integer, Integer>();

        for(int i=0; i < nums.length; i++){
            if(!table.containsKey(nums[i])){
                table.put(nums[i], 1);
            }else{
                table.put(nums[i], table.get(nums[i]) + 1);
            }
        }

        int pairs = 0;
        Set<Integer> setOfKeys = table.keySet();
        for(Integer key:setOfKeys){
            if(table.get(key) > 1){
                pairs += ((table.get(key)) * ((table.get(key)) - 1))/2;
            }

        }

        return pairs;
    }
}

//Time Complexity: O(n)
//Space Complexity: O(1)

A simpler solution:

// O(n) - TC

int cnt = 0;

// creating temp array of size 100, depending on the constraints of
//1 <= nums[i] <= 100

int[] temp = new int[101];
for(int i=0;i<n;i++){
    cnt += temp[nums[i]];
    temp[nums[i]]++;
}
return cnt;