//DFS Recursive

class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] edge : edges) {
            int a = edge[0], b = edge[1];
            graph.computeIfAbsent(a, val -> new ArrayList<Integer>()).add(b);
            graph.computeIfAbsent(b, val -> new ArrayList<Integer>()).add(a);
        }

        boolean[] seen = new boolean[n];
        return dfsRecursive(graph, seen, source, destination);
    }

    private static boolean dfsRecursive(Map<Integer, List<Integer>> graph, boolean[] seen, int source, int destination) {
        if(source == destination) return true;
        if(seen[source]) return false;

        seen[source] = true;

        for(int neighbor: graph.get(source)){
            if(dfsRecursive(graph, seen, neighbor, destination)) return true;
        }

        return false;
    }
}

TC: O(n + m)
    In typical DFS Search, the time complexity is O(V + E) where V, E are the number of vertices and edges. More specifically, there are n nodes and m edges in this problem.
    -> We build adjacent list of all m edges in graph which takes O(m)
    -> Each node is only visited once, it takes O(n) to traverse all nodes
    So, the overall time complexity is O(n + m)
SC: O(n + m)
    -> We use a hash map to store m edges, which takes O(m) space
    -> We use a bool array seen to keep track of the visited nodes, which requires O(n) space
    -> The recursive function takes O(n) space
    The overall complexity is O(n + m)