2 - Add Two Numbers

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode ans = new ListNode(0);
        ListNode dummy = ans;

        ListNode l1Parser = l1;
        ListNode l2Parser = l2;

        int l1Length = 0;
        int l2Length = 0;

        ArrayList<Integer> l1Arr = new ArrayList<>();
        while (l1Parser != null) {
            l1Length++;
            l1Arr.add(l1Parser.val);
            l1Parser = l1Parser.next;
        }

        ArrayList<Integer> l2Arr = new ArrayList<>();
        while (l2Parser != null) {
            l2Length++;
            l2Arr.add(l2Parser.val);
            l2Parser = l2Parser.next;
        }

        System.out.println("l1Length: " + l1Length + " ||  l2Length: " + l2Length);

        System.out.println(l1Arr.size() + " ---- " + l2Arr.size());
        for (int i : l1Arr) {
            System.out.print(i + " || ");
        }
        System.out.println();

        for (int i : l2Arr) {
            System.out.print(i + " || ");
        }

        int insert = 0;
        int carry = 0;
        int count = 0;

        int l1Counter = 0;
        int l2Counter = 0;
        ArrayList<Integer> sum = new ArrayList<>();
        while (l1Counter < l1Length && l2Counter < l2Length) {
            insert = l1Arr.get(l1Counter) + l2Arr.get(l2Counter) + carry;

            if (insert > 9) {
                System.out.println("\nHere insert is: " + insert + " and carry is: " + carry + " Integer.toString(insert).charAt(1) " + Integer.toString(insert).charAt(1));
                carry = 1;
                sum.add(Integer.valueOf((Integer.toString(insert).substring(1))));
            } else {
                System.out.println("\nHere insert is: " + insert + " and carry is: " + carry);
                carry = 0;
                sum.add(Integer.valueOf((Integer.toString(insert))));
            }

            l1Counter++;
            l2Counter++;
        }

        System.out.println("l1Counter: " + l1Counter + " || l2Counter: " + l2Counter + " || carry: " + carry);
        while (l1Counter < l1Length) {
            System.out.println("l1Counter: "+ l1Counter);
            insert = l1Arr.get(l1Counter) + carry;

            if (insert > 9) {
                System.out.println("\nHere insert is: " + insert + " and carry is: " + carry + " Integer.toString(insert).charAt(1) " + Integer.toString(insert).charAt(1));
                carry = 1;
                sum.add(Integer.valueOf((Integer.toString(insert).substring(1))));
            } else {
                System.out.println("\nHere insert is: " + insert + " and carry is: " + carry);
                carry = 0;
                sum.add(Integer.valueOf((Integer.toString(insert))));
            }

            l1Counter++;
        }

        while (l2Counter < l2Length) {
            System.out.println("l2Counter: "+ l2Counter);
            insert = l2Arr.get(l2Counter) + carry;

            if (insert > 9) {
                System.out.println("\nHere insert is: " + insert + " and carry is: " + carry + " Integer.toString(insert).charAt(1) " + Integer.toString(insert).charAt(1));
                carry = 1;
                sum.add(Integer.valueOf((Integer.toString(insert).substring(1))));
            } else {
                System.out.println("\nHere insert is: " + insert + " and carry is: " + carry);
                carry = 0;
                sum.add(Integer.valueOf((Integer.toString(insert))));
            }

            l2Counter++;
        }

        if(carry > 0){
            sum.add(carry);
        }

        for (int i : sum) {
            System.out.print(i + " || ");
        }

        for(int c : sum){
            dummy.next = new ListNode(c);
            dummy = dummy.next;
        }

        return ans.next;
    }
}

TC: O(max(m,n)). Assume that m and n represents the length of l1 and l2 respectively, the algorithm above iterates at most max(m,n) times.
SC: O(1). The length of the new list is at most max(m,n) + 1. However, we don't count the answer as part of the space complexity.