/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
         if(root == null){
            return null;
         }

         if(root.equals(p) || root.equals(q)){
            return root;
         }

         TreeNode left = lowestCommonAncestor(root.left, p, q);
         TreeNode right = lowestCommonAncestor(root.right, p, q);

         if(left != null && right != null) return root;

         return (left != null)? left : right;
    }
}

//TC: O(N), where N is the number of nodes in the binary tree. In the worst case, we might be visiting all the nodes of the binary tree
//SC: O(N). This is because the maximum amount of space utilized by the recursion stack would be N since the height of a skewed binary tree could be N